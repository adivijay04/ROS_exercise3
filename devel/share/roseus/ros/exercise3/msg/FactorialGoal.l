;; Auto-generated. Do not edit!


(when (boundp 'exercise3::FactorialGoal)
  (if (not (find-package "EXERCISE3"))
    (make-package "EXERCISE3"))
  (shadow 'FactorialGoal (find-package "EXERCISE3")))
(unless (find-package "EXERCISE3::FACTORIALGOAL")
  (make-package "EXERCISE3::FACTORIALGOAL"))

(in-package "ROS")
;;//! \htmlinclude FactorialGoal.msg.html


(defclass exercise3::FactorialGoal
  :super ros::object
  :slots (_order ))

(defmethod exercise3::FactorialGoal
  (:init
   (&key
    ((:order __order) 0)
    )
   (send-super :init)
   (setq _order (round __order))
   self)
  (:order
   (&optional __order)
   (if __order (setq _order __order)) _order)
  (:serialization-length
   ()
   (+
    ;; int64 _order
    8
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; int64 _order
#+(or :alpha :irix6 :x86_64)
       (progn (sys::poke _order (send s :buffer) (send s :count) :long) (incf (stream-count s) 8))
#-(or :alpha :irix6 :x86_64)
       (cond ((and (class _order) (= (length (_order . bv)) 2)) ;; bignum
              (write-long (ash (elt (_order . bv) 0) 0) s)
              (write-long (ash (elt (_order . bv) 1) -1) s))
             ((and (class _order) (= (length (_order . bv)) 1)) ;; big1
              (write-long (elt (_order . bv) 0) s)
              (write-long (if (>= _order 0) 0 #xffffffff) s))
             (t                                         ;; integer
              (write-long _order s)(write-long (if (>= _order 0) 0 #xffffffff) s)))
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; int64 _order
#+(or :alpha :irix6 :x86_64)
      (setf _order (prog1 (sys::peek buf ptr- :long) (incf ptr- 8)))
#-(or :alpha :irix6 :x86_64)
      (setf _order (let ((b0 (prog1 (sys::peek buf ptr- :integer) (incf ptr- 4)))
                  (b1 (prog1 (sys::peek buf ptr- :integer) (incf ptr- 4))))
              (cond ((= b1 -1) b0)
                     ((and (= b1  0)
                           (<= lisp::most-negative-fixnum b0 lisp::most-positive-fixnum))
                      b0)
                    ((= b1  0) (make-instance bignum :size 1 :bv (integer-vector b0)))
                    (t (make-instance bignum :size 2 :bv (integer-vector b0 (ash b1 1)))))))
   ;;
   self)
  )

(setf (get exercise3::FactorialGoal :md5sum-) "fa193cc5c689c8516842596a1268cc71")
(setf (get exercise3::FactorialGoal :datatype-) "exercise3/FactorialGoal")
(setf (get exercise3::FactorialGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#goal definition
int64 order

")



(provide :exercise3/FactorialGoal "fa193cc5c689c8516842596a1268cc71")


